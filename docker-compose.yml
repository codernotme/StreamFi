services:
  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - nms
    networks:
      - streamfi-net

  # MongoDB service removed â€” Atlas-only mode

  # Node Media Server
  nms:
    build:
      # Path to the media server in this repo
      context: ./packages/media-server
      dockerfile: Dockerfile
    ports:
      - "1935:1935"   # RTMP ingest
      - "8081:8080"   # HLS HTTP (external:internal)
    env_file:
      - ./packages/media-server/.env   # keep NMS-specific envs here
    networks:
      - streamfi-net

  # Clearing Node (P2P relay)
  clearing-node:
    build:
      context: ./packages/clearing-node
      dockerfile: Dockerfile
      network: host
      args:
        - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-https://registry.npmmirror.com}
    env_file:
      - ./packages/backend/.env
    environment:
      LOG_LEVEL: info
      P2P_TOPIC_PREFIX: streamfi
      # libp2p listeners
      P2P_LISTEN_TCP: /ip4/0.0.0.0/tcp/7003
      P2P_LISTEN_WS: /ip4/0.0.0.0/tcp/7004/ws
      # Accept EIP-712 signatures for these verifying contracts (comma-separated)
      P2P_EIP712_VERIFY_CONTRACTS: "${NITROLITE_ADJUDICATOR_ADDRESS},${NITROLITE_CUSTODY_ADDRESS},${CREATOR_VAULT_ADDRESS}"
      PORT: 7002
    ports:
      - "7001:7001"   # WS gateway for browsers
      - "7002:7002"   # HTTP health
      - "7003:7003"   # libp2p TCP
      - "7004:7004"   # libp2p WS
    networks:
      - streamfi-net

  # Backend Service
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      args:
        - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-https://registry.npmmirror.com}
        - NITROLITE_ADJUDICATOR_ADDRESS=${NITROLITE_ADJUDICATOR_ADDRESS}
        - NITROLITE_CUSTODY_ADDRESS=${NITROLITE_CUSTODY_ADDRESS}
        - CREATOR_VAULT_ADDRESS=${CREATOR_VAULT_ADDRESS}
    ports:
      - "8000:8000"
    env_file:
      - ./packages/backend/.env
    environment:
      MONGO_DB_NAME: ${MONGO_DB_NAME:-streamfi}
      CSRF_SECURE: "false"
      # Point backend to the clearing-node service within the Docker network
      CLEARING_NODE_WS_URL: ws://clearing-node:7001
      NITROLITE_ADJUDICATOR_ADDRESS: ${NITROLITE_ADJUDICATOR_ADDRESS}
      NITROLITE_CUSTODY_ADDRESS: ${NITROLITE_CUSTODY_ADDRESS}
      CREATOR_VAULT_ADDRESS: ${CREATOR_VAULT_ADDRESS}
    depends_on:
      - nms
    networks:
      - streamfi-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE: "/api"
        NEXT_PUBLIC_HLS_BASE: "http://localhost:8081"
        NEXT_PUBLIC_CHAT_WS_BASE: "/socket.io"
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - ./packages/frontend/.env.local
    environment:
      BACKEND_URL: "http://backend:8000"
    networks:
      - streamfi-net

networks:
  streamfi-net:
    driver: bridge
